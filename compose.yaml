x-app: &default-app
  build:
    context: "."
    dockerfile: "Dockerfile.django"
    target: "app"
    args:
      - "UID=${UID:-1000}"
      - "GID=${GID:-1000}"
      - "DEBUG=${DEBUG:-false}"
      - "NODE_ENV=${NODE_ENV:-production}"
  depends_on:
    postgres:
      condition: "service_started"
      required: false
    redis:
      condition: "service_started"
      required: false
  env_file:
    - ".env"
  restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
  stop_grace_period: "3s"
  tty: true
  volumes:
    - ".:/app"  # Mount entire project for hot reload in development
    - "/app/public_collected"  # Protect built fonts/assets from being overwritten by host mount
    - "/app/public/fonts"  # Protect downloaded fonts from being overwritten by host mount
    - "./media:/mnt/media"  # User uploads - matches Railway volume mount path

x-assets: &default-assets
  build:
    context: "."
    dockerfile: "Dockerfile.django"
    target: "frontend-dev"
    args:
      - "UID=${UID:-1000}"
      - "GID=${GID:-1000}"
      - "NODE_ENV=${NODE_ENV:-development}"
  env_file:
    - ".env"
  profiles: ["assets"]
  restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
  stop_grace_period: "0"
  tty: true
  volumes:
    - ".:/app"
    - "/app/frontend/node_modules"
    - "./.vite-cache:/app/frontend/node_modules/.vite"  # Mount .vite cache on host so it can be cleared

services:
  postgres:
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_POSTGRES_CPUS:-0}"
          memory: "${DOCKER_POSTGRES_MEMORY:-0}"
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    image: "postgres:17.1-alpine"
    profiles: ["postgres"]
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "3s"
    volumes:
      - "postgres:/var/lib/postgresql/data"

  redis:
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_REDIS_CPUS:-0}"
          memory: "${DOCKER_REDIS_MEMORY:-0}"
    image: "redis:7.4.1-alpine"
    profiles: ["redis"]
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "3s"
    volumes:
      - "redis:/data"

  web:
    <<: *default-app
    command: gunicorn -c python:config.gunicorn config.wsgi
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_WEB_CPUS:-0}"
          memory: "${DOCKER_WEB_MEMORY:-0}"
    healthcheck:
      test: "${DOCKER_WEB_HEALTHCHECK_TEST:-curl localhost:8000/up}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    ports:
      - "${DOCKER_WEB_PORT_FORWARD:-127.0.0.1:8000}:${PORT:-8000}"
    profiles: ["web"]

  worker:
    <<: *default-app
    command: celery -A config worker -l "${CELERY_LOG_LEVEL:-info}" --concurrency=${CELERY_WORKER_CONCURRENCY:-2}
    entrypoint: []
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_WORKER_CPUS:-0}"
          memory: "${DOCKER_WORKER_MEMORY:-0}"
    profiles: ["worker"]

  js:
    <<: *default-assets
    command: bun dev
    ports:
      - "5173:5173"  # Vite dev server (TanStack Start uses Vite)
    environment:
      - DJANGO_API_URL=http://web:8000
      - VITE_PORT=5173
      - DISABLE_ROUTE_GEN=true  # Disable TanStack Router file watching in Docker (prevents infinite loops)

  # NOTE: css service removed - Vite handles all CSS including Tailwind
  # The separate Tailwind watcher (dev:css) was looking for a non-existent css/app.css file
  # Vite's built-in PostCSS + Tailwind integration is faster and more reliable

  static:
    <<: *default-assets
    command: bash -c "sleep infinity"

volumes:
  postgres: {}
  redis: {}
