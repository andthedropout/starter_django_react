"""
Django settings for helloweb project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import socket
import sys
from distutils.util import strtobool
from pathlib import Path
import dj_database_url # Ensure this import is present

# Build paths inside the project like this: BASE_DIR / "subdir".
BASE_DIR = Path(__file__).resolve().parent.parent

# --- BEGIN DEBUGGING PRINT ---
print(f"DEBUG: Reading DATABASE_URL from env: {os.getenv('DATABASE_URL')}")
print(f"DEBUG: Reading POSTGRES_USER from env: {os.getenv('POSTGRES_USER')}")
print(f"DEBUG: Reading POSTGRES_DB from env: {os.getenv('POSTGRES_DB')}")
# --- END DEBUGGING PRINT ---

SECRET_KEY = os.environ["SECRET_KEY"]

# Define DEBUG early as other settings depend on it
DEBUG = bool(strtobool(os.getenv("DEBUG", "false")))

# When DEBUG is False, set secure cookie settings
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_NAME = 'csrftoken'  # Explicit name for clarity
CSRF_USE_SESSIONS = False  # Store in cookie instead of session for SPA compatibility
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript access to the cookie
CSRF_COOKIE_SAMESITE = 'Lax'  # More permissive SameSite setting for local development

DEBUG_PROPAGATE_EXCEPTIONS = bool(
    strtobool(os.getenv("DEBUG_PROPAGATE_EXCEPTIONS", "false"))
)

# Function to conditionally disable Django Debug Toolbar
def show_toolbar_custom_logic(request):
    print(f"DEBUG_TOOLBAR_CALLBACK: Request path is {request.path}") # Debug print
    # Disable toolbar for any path starting with /api/
    if request.path.startswith('/api/'):
        print("DEBUG_TOOLBAR_CALLBACK: Disabling toolbar for API path.") # Debug print
        return False
    # Default logic
    should_show = DEBUG and not TESTING
    print(f"DEBUG_TOOLBAR_CALLBACK: Default show_toolbar={should_show} (DEBUG={DEBUG}, TESTING={TESTING})") # Debug print
    return should_show

DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': show_toolbar_custom_logic,
    'INSERT_BEFORE': '</head>', # Often helps with SPA / non-standard HTML
}

TESTING = "test" in sys.argv

# https://docs.djangoproject.com/en/5.1/ref/settings/#std:setting-ALLOWED_HOSTS
allowed_hosts = os.getenv("ALLOWED_HOSTS", ".localhost,127.0.0.1,[::1]")
ALLOWED_HOSTS = list(map(str.strip, allowed_hosts.split(",")))

# Add Railway internal domains for healthchecks
ALLOWED_HOSTS.extend([
    ".railway.internal",  # Railway internal services
    "100.64.0.2",         # Railway healthcheck IP
])

# CSRF Trusted Origins for HTTPS POST requests when DEBUG is False
# Read from environment variable or use localhost defaults
csrf_origins_env = os.getenv("CSRF_TRUSTED_ORIGINS", "http://localhost:8000,http://127.0.0.1:8000")
CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in csrf_origins_env.split(",")]

# Add Railway public domain if available
railway_domain = os.getenv("RAILWAY_PUBLIC_DOMAIN")
if railway_domain:
    CSRF_TRUSTED_ORIGINS.append(f"https://{railway_domain}")

# Tell Django to trust X-Forwarded-Proto header from Railway's proxy
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

VITE_PORT = int(os.getenv("VITE_PORT", 5173))

# Application definitions
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "users",
    "themes",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if not TESTING:
    INSTALLED_APPS = [*INSTALLED_APPS, "debug_toolbar"]
    MIDDLEWARE = [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
        *MIDDLEWARE,
    ]

ROOT_URLCONF = "config.urls"

# Define STATIC_ROOT before TEMPLATES uses it
STATIC_ROOT = os.environ.get("STATIC_ROOT", os.path.join(BASE_DIR.parent, "public_collected"))

# Starting with Django 4.1+ we need to pick which template loaders to use
# based on our environment since 4.1+ will cache templates by default.
default_loaders = [
    "django.template.loaders.filesystem.Loader",
    "django.template.loaders.app_directories.Loader",
]

cached_loaders = [("django.template.loaders.cached.Loader", default_loaders)]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
            STATIC_ROOT,
            os.path.join(BASE_DIR.parent, "public_collected"),
        ],
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "loaders": default_loaders if DEBUG else cached_loaders,
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
DATABASES = {
    "default": dj_database_url.config(
        conn_max_age=600, # Optional: set connection max age
        default=os.getenv("DATABASE_URL", f"postgres://{os.getenv('POSTGRES_USER', 'helloweb')}:{os.getenv('POSTGRES_PASSWORD', 'password')}@{os.getenv('POSTGRES_HOST', 'postgres')}:{os.getenv('POSTGRES_PORT', '5432')}/{os.getenv('POSTGRES_DB', 'helloweb')}") # noqa E501
    )
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",  # noqa: E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",  # noqa: E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",  # noqa: E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",  # noqa: E501
    },
]

# Sessions
# https://docs.djangoproject.com/en/5.1/ref/settings/#sessions
SESSION_ENGINE = "django.contrib.sessions.backends.db"

# Redis (optional - falls back to database cache if not available)
REDIS_URL = os.getenv("REDIS_URL", None)

# Caching
# https://docs.djangoproject.com/en/5.1/topics/cache/
# Use Redis if available, otherwise fall back to database cache
if REDIS_URL:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.redis.RedisCache",
            "LOCATION": REDIS_URL,
        }
    }
    CELERY_BROKER_URL = REDIS_URL
    CELERY_RESULT_BACKEND = REDIS_URL
else:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.db.DatabaseCache",
            "LOCATION": "django_cache_table",
        }
    }
    CELERY_BROKER_URL = None
    CELERY_RESULT_BACKEND = None

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Future configurations will be added here as needed

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_URL = "/static/"
STATIC_ROOT = os.environ.get("STATIC_ROOT", os.path.join(BASE_DIR.parent, "public_collected"))

MEDIA_URL = "/media/"
MEDIA_ROOT = os.environ.get("MEDIA_ROOT", os.path.join(BASE_DIR.parent, "public", "media"))

STATICFILES_DIRS = [
    os.path.join(BASE_DIR.parent, "frontend", "dist"),  # Vite build output
    os.path.join(BASE_DIR.parent, "public"),            # Static assets (images, fonts, etc.)
]

# Ensure uploads directory is included in static files
UPLOADS_DIR = os.path.join(BASE_DIR.parent, "public", "uploads")
os.makedirs(UPLOADS_DIR, exist_ok=True)
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Django Debug Toolbar
# https://django-debug-toolbar.readthedocs.io/
if DEBUG:
    # We need to configure an IP address to allow connections from, but in
    # Docker we can't use 127.0.0.1 since this runs in a container but we want
    # to access the toolbar from our browser outside of the container.
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + [
        "127.0.0.1",
        "10.0.2.2",
    ]

# OpenRouter AI Configuration
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY', '')
SITE_URL = os.getenv('SITE_URL', 'http://localhost:8000')
