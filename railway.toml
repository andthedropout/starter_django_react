# Railway Deployment Configuration
# This configures the web service only
# Add PostgreSQL via Railway dashboard: Add New > Database > PostgreSQL
# For more info: https://docs.railway.app/reference/config-as-code

[build]
builder = "dockerfile"
dockerfilePath = "Dockerfile.django"

[build.buildArgs]
NODE_ENV = "production"
VITE_USE_BACKEND_THEMES = "false"
VITE_FRONTEND_THEME = "vercel"

[deploy]
# startCommand removed - using Dockerfile CMD instead
healthcheckPath = "/up"
# Serverless-friendly: 180s allows time for PostgreSQL cold boot (15s) + migrations (30s) + app start (10s)
# Prevents 404 errors when both app and database are waking from sleep
healthcheckTimeout = 180
restartPolicyType = "ON_FAILURE"

# CRITICAL: Volume for persistent media file uploads
# Railway volumes are mounted with root ownership (UID 0)
# MUST set RAILWAY_RUN_UID=0 in environment variables for write permissions
[[deploy.volumes]]
mountPath = "/mnt/media"

# PR Preview Environments
# Automatically creates isolated preview deployments for each pull request
# Each PR gets its own PostgreSQL database and Django instance
[environments.pr]
[environments.pr.build.buildArgs]
NODE_ENV = "production"
VITE_USE_BACKEND_THEMES = "false"
VITE_FRONTEND_THEME = "cyberpunk"  # Visual distinction from production

[environments.pr.deploy]
healthcheckPath = "/up"
# Faster feedback for PR testing (vs 180s in production)
healthcheckTimeout = 120
restartPolicyType = "ON_FAILURE"
# No media volume for PR environments (cost optimization)
