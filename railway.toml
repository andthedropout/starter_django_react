# Railway Deployment Configuration
# This file enables one-click deployment to Railway
# For more info: https://docs.railway.app/reference/config-as-code

# Define Postgres database service
[[services]]
name = "Postgres"
type = "postgres"

# Define the main Django + React web application
[[services]]
name = "Web"
dockerfile = "Dockerfile.django"

# Web service depends on Postgres being ready
[services.Web.depends]
postgres = ["Postgres"]

# Build arguments passed to Dockerfile
[services.Web.build]
args = { NODE_ENV = "production", VITE_USE_BACKEND_THEMES = "false", VITE_FRONTEND_THEME = "vercel" }

# Environment variables for the web service
[services.Web.env]
# Django Configuration
DEBUG = "false"
PORT = "8000"
PYTHON_MAX_THREADS = "1"
WEB_CONCURRENCY = "2"

# Allowed hosts - Railway auto-populates RAILWAY_PUBLIC_DOMAIN
ALLOWED_HOSTS = "${{RAILWAY_PUBLIC_DOMAIN}},.railway.app"

# Database - References the Postgres service DATABASE_URL
DATABASE_URL = "${{Postgres.DATABASE_URL}}"

# SECRET_KEY auto-generated by Railway for security
# No need to set manually

# Theme Configuration
VITE_USE_BACKEND_THEMES = "false"
VITE_FRONTEND_THEME = "vercel"

# Superuser Credentials
# Users MUST set these in Railway dashboard before deploying:
# - DJANGO_SUPERUSER_USERNAME
# - DJANGO_SUPERUSER_EMAIL
# - DJANGO_SUPERUSER_PASSWORD

# Deployment settings
[services.Web.deploy]
startCommand = "/app/bin/docker-entrypoint-web gunicorn -c python:config.gunicorn config.wsgi"
healthcheckPath = "/up"
healthcheckTimeout = 100
restartPolicyType = "ON_FAILURE"
